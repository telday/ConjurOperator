---
# Source: secrets-provider/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: secrets-provider-service-account
  namespace: default
---
# Source: secrets-provider/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secrets-provider-role
  namespace: default
rules:
  - apiGroups: [""]
    resources: [ "secrets" ]
    verbs: [ "get", "update" ]
---
# Source: secrets-provider/templates/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: default
  name: secrets-provider-role-binding
subjects:
  - kind: ServiceAccount
    namespace: default
    name: secrets-provider-service-account
roleRef:
  kind: Role
  apiGroup: rbac.authorization.k8s.io
  name: secrets-provider-role
---
# Source: secrets-provider/templates/secrets-provider.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: release-name
  namespace: default
spec:
  template:
    metadata:
    spec:
      serviceAccountName: secrets-provider-service-account
      containers:
      - image: docker.io/cyberark/secrets-provider-for-k8s:1.4.0
        imagePullPolicy: IfNotPresent
        name: cyberark-secrets-provider-for-k8s
        env:
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name

        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace

        - name: CONJUR_AUTHN_LOGIN
          value: "host/secrets-provider-app"

        - name: SECRETS_DESTINATION
          value: k8s_secrets

        # Enables the support of multiple Kubernetes applications
        - name: CONTAINER_MODE
          value: application

        - name: K8S_SECRETS
          value: db-credentials
        envFrom:
        - configMapRef:
            name: conjur-configmap
      restartPolicy: Never
  backoffLimit: 0
